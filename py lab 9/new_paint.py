import pygame
import math

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame
pygame.init()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Ä–∞–Ω–∞
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è üé®")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
drawing = False
last_pos = None
shape = "line"  # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º—ã: 'line', 'rect', 'circle', 'eraser', 'square', 'right_triangle', 'equilateral_triangle', 'rhombus'
color = (0, 0, 0)  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç - —á–µ—Ä–Ω—ã–π
radius = 5  # –†–∞–∑–º–µ—Ä –∫–∏—Å—Ç–∏/–ª–∞—Å—Ç–∏–∫–∞

# –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤
colors = [
    (0, 0, 0),      # –ß–µ—Ä–Ω—ã–π
    (255, 0, 0),    # –ö—Ä–∞—Å–Ω—ã–π
    (0, 255, 0),    # –ó–µ–ª–µ–Ω—ã–π
    (0, 0, 255),    # –°–∏–Ω–∏–π
    (255, 255, 0),  # –ñ–µ–ª—Ç—ã–π
    (255, 0, 255),  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
    (0, 255, 255),  # –ë–∏—Ä—é–∑–æ–≤—ã–π
    (255, 255, 255) # –ë–µ–ª—ã–π (–ª–∞—Å—Ç–∏–∫)
]

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
running = True
screen.fill((255, 255, 255))  # –ë–µ–ª—ã–π —Ñ–æ–Ω

def draw_right_triangle(surface, color, start_pos, end_pos, width=1):
    """–†–∏—Å—É–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫"""
    points = [
        start_pos,
        (start_pos[0], end_pos[1]),
        end_pos
    ]
    pygame.draw.polygon(surface, color, points, width)

def draw_equilateral_triangle(surface, color, start_pos, end_pos, width=1):
    """–†–∏—Å—É–µ—Ç —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫"""
    side_length = max(abs(end_pos[0] - start_pos[0]), abs(end_pos[1] - start_pos[1]))
    height = int(side_length * math.sqrt(3) / 2)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    if end_pos[0] < start_pos[0]:
        side_length = -side_length
    if end_pos[1] < start_pos[1]:
        height = -height
    
    points = [
        start_pos,
        (start_pos[0] + side_length, start_pos[1]),
        (start_pos[0] + side_length // 2, start_pos[1] - height)
    ]
    pygame.draw.polygon(surface, color, points, width)

def draw_rhombus(surface, color, start_pos, end_pos, width=1):
    """–†–∏—Å—É–µ—Ç —Ä–æ–º–±"""
    center_x = (start_pos[0] + end_pos[0]) // 2
    center_y = (start_pos[1] + end_pos[1]) // 2
    width = abs(end_pos[0] - start_pos[0]) // 2
    height = abs(end_pos[1] - start_pos[1]) // 2
    
    points = [
        (center_x, center_y - height),  # –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
        (center_x + width, center_y),   # –ü—Ä–∞–≤–∞—è —Ç–æ—á–∫–∞
        (center_x, center_y + height),  # –ù–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
        (center_x - width, center_y)    # –õ–µ–≤–∞—è —Ç–æ—á–∫–∞
    ]
    pygame.draw.polygon(surface, color, points, width)

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        
        # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
        elif event.type == pygame.MOUSEBUTTONDOWN:
            drawing = True
            last_pos = event.pos
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ü–≤–µ—Ç
            for i, col in enumerate(colors):
                rect = pygame.Rect(10 + i * 40, 10, 30, 30)
                if rect.collidepoint(event.pos):
                    color = col
                    if i == len(colors) - 1:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ü–≤–µ—Ç (–ª–∞—Å—Ç–∏–∫)
                        shape = "eraser"
                    else:
                        shape = "line"
        
        # –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ - –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
        elif event.type == pygame.MOUSEBUTTONUP:
            drawing = False
            end_pos = event.pos
            
            # –†–∏—Å—É–µ–º —Ñ–∏–≥—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            if shape == "rect":
                width = end_pos[0] - last_pos[0]
                height = end_pos[1] - last_pos[1]
                pygame.draw.rect(screen, color, (last_pos[0], last_pos[1], width, height), radius)
            elif shape == "circle":
                dx = end_pos[0] - last_pos[0]
                dy = end_pos[1] - last_pos[1]
                radius_circle = int((dx**2 + dy**2)**0.5)
                pygame.draw.circle(screen, color, last_pos, radius_circle)
            elif shape == "square":
                size = max(abs(end_pos[0] - last_pos[0]), abs(end_pos[1] - last_pos[1]))
                if end_pos[0] < last_pos[0]:
                    x = last_pos[0] - size
                else:
                    x = last_pos[0]
                if end_pos[1] < last_pos[1]:
                    y = last_pos[1] - size
                else:
                    y = last_pos[1]
                pygame.draw.rect(screen, color, (x, y, size, size), radius)
            elif shape == "right_triangle":
                draw_right_triangle(screen, color, last_pos, end_pos, radius)
            elif shape == "equilateral_triangle":
                draw_equilateral_triangle(screen, color, last_pos, end_pos, radius)
            elif shape == "rhombus":
                draw_rhombus(screen, color, last_pos, end_pos, radius)
        
        # –ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_l:
                shape = "line"
            elif event.key == pygame.K_r:
                shape = "rect"
            elif event.key == pygame.K_c:
                shape = "circle"
            elif event.key == pygame.K_e:
                shape = "eraser"
                color = (255, 255, 255)  # –ë–µ–ª—ã–π –¥–ª—è –ª–∞—Å—Ç–∏–∫–∞
            elif event.key == pygame.K_s:
                shape = "square"
            elif event.key == pygame.K_t:
                shape = "right_triangle"
            elif event.key == pygame.K_q:
                shape = "equilateral_triangle"
            elif event.key == pygame.K_h:
                shape = "rhombus"
        
        # –†–∏—Å–æ–≤–∞–Ω–∏–µ (–¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏)
        elif event.type == pygame.MOUSEMOTION and drawing:
            if shape == "line":
                pygame.draw.line(screen, color, last_pos, event.pos, radius)
                last_pos = event.pos
            elif shape == "eraser":
                pygame.draw.circle(screen, (255, 255, 255), event.pos, radius)
    
    # –†–∏—Å—É–µ–º –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤
    for i, col in enumerate(colors):
        pygame.draw.rect(screen, col, (10 + i * 40, 10, 30, 30))
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    font = pygame.font.SysFont(None, 24)
    tool_text = font.render(
        f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {shape.upper()} "
        "(L=–õ–∏–Ω–∏—è, R=–ü—Ä—è–º–æ—É–≥., C=–ö—Ä—É–≥, E=–õ–∞—Å—Ç–∏–∫, "
        "S=–ö–≤–∞–¥—Ä–∞—Ç, T=–¢—Ä–µ—É–≥.–ø—Ä—è–º., Q=–¢—Ä–µ—É–≥.—Ä–∞–≤–Ω–æ—Å—Ç., H=–†–æ–º–±)", 
        True, (0, 0, 0))
    screen.blit(tool_text, (10, 50))
    
    pygame.display.flip()

pygame.quit()